{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport MapView from 'react-native-map-clustering';\nimport React, { useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport * as Location from 'expo-location';\nimport { Marker } from 'react-native-maps';\nimport Direction from \"../../direction\";\nimport { Popup } from \"../../PopUp\";\nimport RenderMarker from \"../../renderMarkers\";\nimport styles from \"./map.style\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar ASPECT_RATIO = width / height;\nvar LATITUDE_DELTA = 0.002;\nvar LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;\n\nfunction getCurrentPosition() {\n  return new Promise(function _callee(resolve, reject) {\n    var location;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n          case 3:\n            _context.next = 7;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 7:\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n          case 9:\n            location = _context.sent;\n            location = {\n              coords: {\n                latitude: '49.84585596004817',\n                longitude: '24.026068729812227'\n              }\n            };\n            resolve(location);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  });\n}\n\nfunction Map() {\n  var mapRef = useRef(null);\n  var directionRef = useRef(null);\n  var popupRef = useRef(null);\n  var renderMarkersRef = useRef(null);\n  getCurrentPosition().then(function (location) {\n    mapRef.current.animateToRegion({\n      latitude: location.coords.latitude,\n      longitude: location.coords.longitude,\n      latitudeDelta: LATITUDE_DELTA,\n      longitudeDelta: LONGITUDE_DELTA\n    }, 1000);\n  });\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Popup, {\n    ref: popupRef,\n    title: \"Filter\",\n    onTouchOutside: function onTouchOutside() {\n      renderMarkersRef.current.setRenderMarkers(popupRef.current.getCheckbox());\n      popupRef.current.close();\n    }\n  }), React.createElement(MapView, {\n    ref: mapRef,\n    initialRegion: {\n      latitude: 52.5,\n      longitude: 19.2,\n      latitudeDelta: 8.5,\n      longitudeDelta: 8.5\n    },\n    style: styles.map\n  }, React.createElement(RenderMarker, {\n    ref: renderMarkersRef\n  }), React.createElement(Direction, {\n    ref: directionRef\n  }), React.createElement(Marker, {\n    onPress: function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = directionRef.current;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(getCurrentPosition());\n\n            case 3:\n              _context2.t1 = _context2.sent;\n\n              _context2.t0.makeDirection.call(_context2.t0, _context2.t1, '24.063099,49.8430112');\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    title: \"\\u0428\\u0435\\u0432\\u0447\\u0435\\u043D\\u043A\\u0456\\u0432\\u0441\\u044C\\u043A\\u0438\\u0439 \\u0433\\u0430\\u0439\",\n    coordinate: {\n      latitude: 49.84301126547157,\n      longitude: 24.063099958587234\n    }\n  })), React.createElement(Search, {\n    showFilters: function showFilters() {\n      popupRef.current.open();\n    },\n    onSubmitEditing: function _callee3(event, text) {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.t0 = directionRef.current;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(getCurrentPosition());\n\n            case 3:\n              _context3.t1 = _context3.sent;\n              _context3.t2 = text;\n\n              _context3.t0.makeDirection.call(_context3.t0, _context3.t1, _context3.t2);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }));\n}\n\nexport default Map;","map":{"version":3,"sources":["C:/Users/vahai/Documents/space/WEBDEV/screens/Map/Map.jsx"],"names":["MapView","React","useRef","Location","Marker","Direction","Popup","RenderMarker","styles","Dimensions","get","width","height","ASPECT_RATIO","LATITUDE_DELTA","LONGITUDE_DELTA","getCurrentPosition","Promise","resolve","reject","requestForegroundPermissionsAsync","getCurrentPositionAsync","location","coords","latitude","longitude","Map","mapRef","directionRef","popupRef","renderMarkersRef","then","current","animateToRegion","latitudeDelta","longitudeDelta","container","setRenderMarkers","getCheckbox","close","map","makeDirection","open","event","text"],"mappings":"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","sourcesContent":["import MapView from 'react-native-map-clustering';\r\nimport React, { useRef } from 'react';\r\nimport { View, Dimensions } from 'react-native';\r\nimport * as Location from 'expo-location';\r\nimport { Marker } from 'react-native-maps';\r\n\r\n// import Search from '../../search';\r\nimport Direction from '../../direction';\r\nimport { Popup } from '../../PopUp';\r\nimport RenderMarker from '../../renderMarkers';\r\nimport styles from './map.style';\r\n\r\nconst { width, height } = Dimensions.get('window');\r\n\r\nconst ASPECT_RATIO = width / height;\r\nconst LATITUDE_DELTA = 0.002;\r\nconst LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;\r\n\r\nfunction getCurrentPosition() {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      await Location.requestForegroundPermissionsAsync();\r\n    } catch {}\r\n\r\n    let location = await Location.getCurrentPositionAsync({});\r\n    location = {\r\n      coords: {\r\n        latitude: '49.84585596004817',\r\n        longitude: '24.026068729812227',\r\n      },\r\n    };\r\n    resolve(location);\r\n  });\r\n}\r\n\r\nfunction Map() {\r\n  const mapRef = useRef(null);\r\n  const directionRef = useRef(null);\r\n  const popupRef = useRef(null);\r\n  const renderMarkersRef = useRef(null);\r\n\r\n  getCurrentPosition().then((location) => {\r\n    mapRef.current.animateToRegion(\r\n      {\r\n        latitude: location.coords.latitude,\r\n        longitude: location.coords.longitude,\r\n        latitudeDelta: LATITUDE_DELTA,\r\n        longitudeDelta: LONGITUDE_DELTA,\r\n      },\r\n      1000,\r\n    );\r\n  });\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Popup\r\n        ref={popupRef}\r\n        title=\"Filter\"\r\n        onTouchOutside={() => {\r\n          renderMarkersRef.current.setRenderMarkers(\r\n            popupRef.current.getCheckbox(),\r\n          );\r\n          popupRef.current.close();\r\n        }}\r\n      ></Popup>\r\n      <MapView\r\n        ref={mapRef}\r\n        initialRegion={{\r\n          latitude: 52.5,\r\n          longitude: 19.2,\r\n          latitudeDelta: 8.5,\r\n          longitudeDelta: 8.5,\r\n        }}\r\n        style={styles.map}\r\n      >\r\n        <RenderMarker ref={renderMarkersRef} />\r\n        <Direction ref={directionRef}></Direction>\r\n        <Marker\r\n          onPress={async () => {\r\n            directionRef.current.makeDirection(\r\n              await getCurrentPosition(),\r\n              '24.063099,49.8430112',\r\n            );\r\n          }}\r\n          title=\"Шевченківський гай\"\r\n          coordinate={{\r\n            latitude: 49.84301126547157,\r\n            longitude: 24.063099958587234,\r\n          }}\r\n        />\r\n      </MapView>\r\n      <Search\r\n        showFilters={() => {\r\n          popupRef.current.open();\r\n        }}\r\n        onSubmitEditing={async (event, text) => {\r\n          directionRef.current.makeDirection(await getCurrentPosition(), text);\r\n        }}\r\n      ></Search>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}